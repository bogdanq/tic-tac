{"version":3,"sources":["common/types.ts","common/utils.ts","features/tic-tac/model/model.ts","features/tic-tac/organisms/game-result-modal.tsx","pages/tic-tac-board/hooks/use-page-state.ts","pages/tic-tac-board/tic-tac-board.tsx","App.tsx","index.tsx"],"names":["TicTac","GameStatus","mockUsers","name","type","Cross","ai","Zero","mockAi","checkTicTacCeilsByName","state","areaMockData","Empty","getFreeIndexByArray","arr","maxIndex","length","index","Math","floor","random","markedCellsLength","filter","Boolean","handleSceneClick","createEvent","addAiToScene","resetGame","updateGameStatus","handleSceneClickByAi","to","timeout","event","delayed","delay","source","forward","from","delayWithForward","$scene","createStore","$users","$currentStep","$hasAiInGame","map","users","find","user","$gameStatus","game","Start","vinner","$currenUser","combine","step","sample","clock","guard","fn","checked","target","sceneWasChange","scene","result","changeActiveUser","Pending","GameResultModal","isVisible","useState","modalIsOpen","setIsOpen","handleCloseModal","useCallback","className","isOpen","onRequestClose","onClick","status","prepend","on","_","params","reset","changeGameStatus","Finished","every","ceil","combinedStore","currentStep","gameStatus","currenUser","hasAiInGame","TicTacBoard","useStore","onChange","Grid","Ceil","styled","div","css","App","Modal","setAppElement","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.225418d5.chunk.js","sourcesContent":["export enum TicTac {\n  Cross = \"X\",\n  Zero = \"O\",\n  Empty = \"\",\n}\n\nexport enum GameStatus {\n  Finished = \"Finished\",\n  Pending = \"Pending\",\n  Start = \"Start\",\n}\n\nexport type Game = {\n  game: GameStatus;\n  vinner: TicTac | null;\n};\n\nexport type User = {\n  name: string;\n  type: TicTac;\n  ai: boolean;\n};\n","import { createEvent, Event, forward } from \"effector\";\nimport { delay } from \"patronum/delay\";\n\nimport { Game, GameStatus, TicTac } from \"./types\";\n\nexport const mockUsers = [\n  { name: \"bogdan\", type: TicTac.Cross, ai: false },\n  { name: \"dima\", type: TicTac.Zero, ai: false },\n];\n\nexport const mockAi = { name: \"Ai bot\", type: TicTac.Zero, ai: true };\n\nexport function checkTicTacCeilsByName(\n  state: TicTac[],\n  name: \"Cross\" | \"Zero\"\n) {\n  if (\n    (state[0] === TicTac[name] &&\n      state[1] === TicTac[name] &&\n      state[2] === TicTac[name]) ||\n    (state[3] === TicTac[name] &&\n      state[4] === TicTac[name] &&\n      state[5] === TicTac[name]) ||\n    (state[6] === TicTac[name] &&\n      state[7] === TicTac[name] &&\n      state[8] === TicTac[name]) ||\n    (state[0] === TicTac[name] &&\n      state[3] === TicTac[name] &&\n      state[6] === TicTac[name]) ||\n    (state[1] === TicTac[name] &&\n      state[4] === TicTac[name] &&\n      state[7] === TicTac[name]) ||\n    (state[2] === TicTac[name] &&\n      state[5] === TicTac[name] &&\n      state[8] === TicTac[name]) ||\n    (state[0] === TicTac[name] &&\n      state[4] === TicTac[name] &&\n      state[8] === TicTac[name]) ||\n    (state[6] === TicTac[name] &&\n      state[4] === TicTac[name] &&\n      state[2] === TicTac[name])\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport const areaMockData = [\n  TicTac.Empty,\n  TicTac.Empty,\n  TicTac.Empty,\n  TicTac.Empty,\n  TicTac.Empty,\n  TicTac.Empty,\n  TicTac.Empty,\n  TicTac.Empty,\n  TicTac.Empty,\n];\n\nexport function getFreeIndexByArray(arr: TicTac[]): number {\n  const maxIndex = arr.length;\n  const index = Math.floor(Math.random() * maxIndex);\n\n  const markedCellsLength = arr.filter(Boolean).length;\n\n  if (arr[index] && markedCellsLength !== maxIndex) {\n    return getFreeIndexByArray(arr);\n  }\n\n  return index;\n}\n\nexport function delayWithForward<T>({\n  to,\n  timeout,\n}: {\n  to: Event<T>;\n  timeout: number;\n}) {\n  const event = createEvent<T>(\"trigger by delay\");\n\n  const delayed = delay({ source: event, timeout });\n\n  forward({ from: delayed, to });\n\n  return event;\n}\n\nexport function updateSceneListener(\n  state: TicTac[],\n  changeGameStatus: Event<Game>\n) {\n  if (checkTicTacCeilsByName(state, \"Cross\")) {\n    changeGameStatus({\n      game: GameStatus.Finished,\n      vinner: TicTac.Cross,\n    });\n\n    return state;\n  }\n\n  if (checkTicTacCeilsByName(state, \"Zero\")) {\n    changeGameStatus({\n      game: GameStatus.Finished,\n      vinner: TicTac.Zero,\n    });\n\n    return state;\n  }\n\n  if (state.every((ceil) => Boolean(ceil))) {\n    changeGameStatus({\n      game: GameStatus.Finished,\n      vinner: TicTac.Empty,\n    });\n\n    return state;\n  }\n}\n","import { createStore, createEvent, sample, guard, combine } from \"effector\";\n\nimport { GameStatus, TicTac, Game, User } from \"../../../common/types\";\nimport {\n  areaMockData,\n  getFreeIndexByArray,\n  delayWithForward,\n  updateSceneListener,\n  mockUsers,\n  mockAi,\n} from \"../../../common/utils\";\n\nexport const handleSceneClick = createEvent<number>(\"cross or zero move\");\n\nexport const addAiToScene = createEvent<boolean>();\n\nexport const resetGame = createEvent(\"reset game\");\n\nexport const updateGameStatus = createEvent<Game>();\n\nconst handleSceneClickByAi = delayWithForward<number>({\n  to: handleSceneClick,\n  timeout: 1000,\n});\n\nexport const $scene = createStore<TicTac[]>(areaMockData);\n\nexport const $users = createStore<User[]>(mockUsers);\n\nexport const $currentStep = createStore<TicTac>(TicTac.Cross);\n\nexport const $hasAiInGame = $users.map((users) =>\n  Boolean(users.find((user) => user.ai))\n);\n\nexport const $gameStatus = createStore<Game>({\n  game: GameStatus.Start,\n  vinner: null,\n});\n\nexport const $currenUser = combine($users, $currentStep).map(([users, step]) =>\n  users.find((user) => user.type === step)\n);\n\nsample({\n  source: addAiToScene,\n  clock: guard({\n    source: addAiToScene,\n    filter: $gameStatus.map(({ game }) => game === GameStatus.Start),\n  }),\n  fn: (checked) => {\n    if (checked) {\n      const [user] = mockUsers;\n\n      return [user, mockAi];\n    }\n\n    return mockUsers;\n  },\n  target: $users,\n});\n\nconst sceneWasChange = sample({\n  source: combine($currentStep, $scene),\n  clock: handleSceneClick,\n  fn: ([step, scene], index) => {\n    if (scene[index]) {\n      return scene;\n    }\n\n    const result = [...scene];\n    result[index] = step;\n\n    return result;\n  },\n  target: $scene,\n});\n\nconst changeActiveUser = guard({\n  source: sceneWasChange,\n  filter: $gameStatus.map(({ game }) => game === GameStatus.Pending),\n});\n\nguard({\n  source: $scene,\n  filter: combine($gameStatus, $currenUser).map(([status, user]) => {\n    return status.game === GameStatus.Pending && Boolean(user?.ai);\n  }),\n  // @TODO пофиксить тип\n  // @ts-ignore\n  target: handleSceneClickByAi.prepend((scene: TicTac[]) => {\n    return getFreeIndexByArray(scene);\n  }),\n});\n\n$gameStatus\n  .on(updateGameStatus, (_, params) => params)\n  .on(handleSceneClick, (state) => {\n    if (state.game !== GameStatus.Pending) {\n      return {\n        game: GameStatus.Pending,\n        vinner: null,\n      };\n    }\n\n    return state;\n  })\n  .reset(resetGame);\n\n$currentStep\n  .on(changeActiveUser, (step) => {\n    if (step === TicTac.Cross) {\n      return TicTac.Zero;\n    }\n\n    return TicTac.Cross;\n  })\n  .reset(resetGame);\n\n$scene\n  .on(sceneWasChange, (scene) => updateSceneListener(scene, updateGameStatus))\n  .reset(resetGame);\n","import React, { useCallback, useState } from \"react\";\nimport Modal from \"react-modal\";\n\nimport { TicTac } from \"../../../common/types\";\nimport { resetGame } from \"../model\";\n\ntype Props = {\n  vinner: TicTac | null;\n  isVisible: boolean;\n};\n\nexport function GameResultModal({ isVisible, vinner }: Props) {\n  const [modalIsOpen, setIsOpen] = useState(false);\n\n  const handleCloseModal = useCallback(() => {\n    resetGame();\n    setIsOpen(false);\n  }, []);\n\n  return (\n    <Modal\n      className=\"modal\"\n      isOpen={isVisible || modalIsOpen}\n      onRequestClose={() => {\n        // setIsOpen(false);\n      }}\n    >\n      <>\n        {vinner === TicTac.Empty ? <h1>Ничья</h1> : <h1>Победил {vinner}</h1>}\n\n        <button onClick={handleCloseModal}>Начать заново</button>\n      </>\n    </Modal>\n  );\n}\n","import { combine } from \"effector\";\nimport { useStore } from \"effector-react\";\n\nimport {\n  $currentStep,\n  $gameStatus,\n  $scene,\n  $currenUser,\n  $hasAiInGame,\n  $users,\n} from \"../../../features/tic-tac/model\";\n\nconst combinedStore = combine({\n  scene: $scene,\n  currentStep: $currentStep,\n  gameStatus: $gameStatus,\n  currenUser: $currenUser,\n  hasAiInGame: $hasAiInGame,\n  users: $users,\n});\n\nexport function usePageState() {\n  const store = useStore(combinedStore);\n\n  return store;\n}\n","import React from \"react\";\nimport styled, { css } from \"styled-components\";\n\nimport { GameStatus, TicTac } from \"../../common/types\";\nimport {\n  GameResultModal,\n  handleSceneClick,\n  addAiToScene,\n} from \"../../features/tic-tac\";\nimport { usePageState } from \"./hooks/use-page-state\";\n\nexport function TicTacBoard() {\n  const { scene, hasAiInGame, gameStatus, currenUser, users } = usePageState();\n\n  const isVisible = gameStatus.game === GameStatus.Finished;\n\n  return (\n    <div className=\"App\">\n      <h1>Крестики нолики</h1>\n      <div>\n        <span>Играть с ботом</span>\n        <input\n          type=\"checkbox\"\n          checked={hasAiInGame}\n          onChange={({ target }) => {\n            addAiToScene(target.checked);\n          }}\n        />\n        {users.map((user) => (\n          <p key={user.name}>{user.name}</p>\n        ))}\n      </div>\n      <h2>\n        Текущий ход:\n        <span>{currenUser?.name}</span>\n      </h2>\n      <Grid>\n        {scene.map((ceil, index) => (\n          <Ceil\n            key={index}\n            onClick={() => {\n              if (!ceil && !currenUser?.ai) {\n                handleSceneClick(index);\n              }\n            }}\n            type={ceil}\n          >\n            {ceil}\n          </Ceil>\n        ))}\n      </Grid>\n      <GameResultModal vinner={gameStatus.vinner} isVisible={isVisible} />\n    </div>\n  );\n}\n\nconst Grid = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  max-width: 180px;\n`;\n\nconst Ceil = styled.div<{ type: TicTac }>`\n  margin: 3px;\n  width: 50px;\n  height: 50px;\n  border: 1px solid #ccc;\n  border-radius: 10px;\n  cursor: pointer;\n  font-size: 18px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.5s;\n\n  ${({ type }) => {\n    switch (type) {\n      case TicTac.Cross:\n        return css`\n          background: #adc0df87;\n          color: #adc0df;\n          border-color: #adc0df;\n        `;\n      case TicTac.Zero:\n        return css`\n          background: #fff6d5;\n          color: #fd5;\n          border-color: #fd5;\n        `;\n      default:\n        return \"\";\n    }\n  }}\n\n  &:hover {\n    box-shadow: 0px 3px 14px -3px rgba(0, 0, 0, 0.75);\n  }\n`;\n","import React from \"react\";\nimport Modal from \"react-modal\";\nimport { TicTacBoard } from \"./pages/tic-tac-board/tic-tac-board\";\n\nModal.setAppElement(\"#root\");\n\nexport function App() {\n  return (\n    <>\n      <TicTacBoard />\n    </>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\n\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}